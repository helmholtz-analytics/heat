name: Prep Heat Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "The version to release"
        required: true
        default: "0.0.0"
      base_branch:
        description: "The base branch to create the release branch from"
        required: true
        default: "main"
      title:
        description: "Release title"
        required: False
        default: "Heat"

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    # environment: release
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.base_branch }}
      - uses: release-drafter/release-drafter@v6 # v6.0.0
        id: release_drafter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commitish: 'stable'
          name: ${{ github.event.inputs.title }}
          config-name: rd-release-config.yml
      - name: Bump version.py and create PR
        env:
          PR_BRANCH: pre-release/${{ inputs.release_version }}
          VERSION: ${{ inputs.release_version }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create branch
          git checkout -b pre-release/${VERSION}

          # Split version number into major, minor, and micro
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          MICRO=$(echo $VERSION | cut -d. -f3)

          # Write on to the version.py file
          sed -i "s/major: int = \([0-9]\+\)/major: int = $MAJOR/g" heat/core/version.py
          sed -i "s/minor: int = \([0-9]\+\)/minor: int = $MINOR/g" heat/core/version.py
          sed -i "s/micro: int = \([0-9]\+\)/micro: int = $MICRO/g" heat/core/version.py
          sed -i "s/extension: str = .*/extension: str = None/g" heat/core/version.py
          
          { echo -e "# v${MAJOR}.${MINOR}.${MICRO} - ${{github.event.inputs.title}}\n${{ steps.release_drafter.outputs.body}}\n"; cat CHANGELOG.md; } > tmp.md
          mv tmp.md CHANGELOG.md

          # Git configuration with anonymous user and email
          git config --global user.email ""
          git config --global user.name "Heat Release Bot"

          # Commit the changes
          git add heat/core/version.py CHANGELOG.md
          git commit -m "Bump version to $VERSION"

          # Push the changes
          git push --set-upstream origin pre-release/${VERSION}

          # Create PR for release
          gh pr create \
          --base stable \
          --head ${{ env.PR_BRANCH }} \
          --title "Heat ${{ env.VERSION }} - Release" \
          --body "Pre-release branch for Heat ${{ env.VERSION }}.
          Any release work should be done on this branch, and then merged into the release branch and main, following git-flow guidelines.

          TODO:
          - [x] Update version.py
          - [ ] Ensure Citation file is up to date.
          - [ ] Ensure the Changelog is up to date.

          DO NOT DELETE BRANCH AFTER MERGING!" \
          --label "pre-release"

          # Create PR for main
          gh pr create --base main \
          --head ${{ env.PR_BRANCH }} \
          --title "Heat ${{ env.VERSION }} - Main" \
          --body "Copy of latest pre-release PR targeting release. 
          DO NOT CHANGE ANYTHING UNTIL THE RELEASE BRANCH HAS BEEN MERGED. 

          TODO:
          - [ ] Make sure version.py is updated to reflect the dev version.
          - [ ] Ensure Citation file is up to date.
          - [ ] Ensure the Changelog is up to date.

          --label "pre-release"

      
